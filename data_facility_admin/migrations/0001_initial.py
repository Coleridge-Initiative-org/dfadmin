# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2018-02-16 02:07
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataAgreement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
                ('text', models.TextField(blank=True, max_length=256)),
                ('document', models.FileField(blank=True, max_length=256, upload_to=b'file_upload/data_agreements')),
                ('delete_on_expiration', models.BooleanField(default=False)),
                ('expiration_date', models.DateField(blank=True, default=None)),
                ('deletion_method', models.CharField(blank=True, max_length=256)),
                ('version', models.CharField(blank=True, max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['dataset', 'version', 'title'],
            },
        ),
        migrations.CreateModel(
            name='DataAgreementSignature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accepted', models.BooleanField()),
                ('date', models.DateField(auto_now_add=True)),
                ('status', models.CharField(choices=[(b'To sign', b'To sign'), (b'Signed', b'Signed')], default=b'To sign', max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_agreement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_facility_admin.DataAgreement')),
            ],
            options={
                'ordering': ['user', 'data_agreement'],
            },
        ),
        migrations.CreateModel(
            name='DataProvider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DatasetAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.IntegerField(blank=True, default=None, help_text=b'Id for from the ticketing system, so it is possible to trace back if more info is needed.', null=True)),
                ('requested_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('granted_at', models.DateTimeField(blank=True, null=True)),
                ('expire_at', models.DateTimeField(blank=True, null=True)),
                ('motivation', models.TextField(blank=True, help_text=b'The reason of this request.', max_length=256, null=True)),
                ('load_to_database', models.BooleanField(default=False)),
                ('database_name', models.CharField(blank=True, max_length=256)),
                ('schema', models.CharField(blank=True, max_length=256)),
                ('database_status', models.CharField(choices=[(b'Requested', b'Requested'), (b'Loaded', b'Loaded')], default=b'Requested', max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['project', 'dataset_id'],
            },
        ),
        migrations.CreateModel(
            name='DataSteward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['dataset', 'user', 'start_date', 'end_date'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataAgreement',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
                ('text', models.TextField(blank=True, max_length=256)),
                ('document', models.TextField(blank=True, max_length=256)),
                ('delete_on_expiration', models.BooleanField(default=False)),
                ('expiration_date', models.DateField(blank=True, default=None)),
                ('deletion_method', models.CharField(blank=True, max_length=256)),
                ('version', models.CharField(blank=True, max_length=256)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical data agreement',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataAgreementSignature',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('accepted', models.BooleanField()),
                ('date', models.DateField(blank=True, editable=False)),
                ('status', models.CharField(choices=[(b'To sign', b'To sign'), (b'Signed', b'Signed')], default=b'To sign', max_length=256)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('data_agreement', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.DataAgreement')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical data agreement signature',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataset',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('ldap_id', models.IntegerField(blank=True, db_index=True, editable=False, help_text=b'This is an internal LDAP information. Don`t change this value unless you know what you`re doing.', null=True)),
                ('ldap_name', models.CharField(blank=True, db_index=True, max_length=256, null=True, validators=[django.core.validators.RegexValidator(regex=b'^[a-z_-]{5,}$')])),
                ('public', models.BooleanField(default=False, help_text=b'Check this if everyone should have access to this dataset.')),
                ('doi', models.CharField(db_index=True, max_length=256)),
                ('name', models.CharField(max_length=256)),
                ('version', models.CharField(blank=True, default=b'1', max_length=256, null=True)),
                ('storage_location', models.CharField(blank=True, help_text=b'Location of this dataset (Optional if dataset is green).', max_length=256, null=True)),
                ('vault_volume', models.CharField(blank=True, help_text=b'Volume on DF Vault. For non green datasets only. This information is internal.', max_length=256, null=True)),
                ('needs_review', models.BooleanField(default=False)),
                ('shareable', models.BooleanField(default=True, help_text=b'Indicates if this dataset can be shared with other users.')),
                ('last_reported_at', models.DateField(blank=True, null=True)),
                ('expiration', models.DateField(blank=True, null=True)),
                ('data_classification', models.CharField(choices=[(b'Green', b'Green'), (b'Restricted Green', b'Restricted Green'), (b'Yellow', b'Yellow'), (b'Red', b'Red')], default=b'Green', max_length=256)),
                ('report_frequency', models.CharField(choices=[(b'No Reporting Needed', b'No Reporting Needed'), (b'Quarterly', b'Quarterly'), (b'Biannual', b'Biannual'), (b'Annual', b'Annual')], default=b'No Reporting Needed', max_length=256)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('data_provider', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.DataProvider')),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical dataset',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDatasetAccess',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('request_id', models.IntegerField(blank=True, default=None, help_text=b'Id for from the ticketing system, so it is possible to trace back if more info is needed.', null=True)),
                ('requested_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('granted_at', models.DateTimeField(blank=True, null=True)),
                ('expire_at', models.DateTimeField(blank=True, null=True)),
                ('motivation', models.TextField(blank=True, help_text=b'The reason of this request.', max_length=256, null=True)),
                ('load_to_database', models.BooleanField(default=False)),
                ('database_name', models.CharField(blank=True, max_length=256)),
                ('schema', models.CharField(blank=True, max_length=256)),
                ('database_status', models.CharField(choices=[(b'Requested', b'Requested'), (b'Loaded', b'Loaded')], default=b'Requested', max_length=256)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical dataset access',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataSteward',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical data steward',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDfRole',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('ldap_id', models.IntegerField(blank=True, db_index=True, editable=False, help_text=b'This is an internal LDAP information. Don`t change this value unless you know what you`re doing.', null=True)),
                ('ldap_name', models.CharField(blank=True, db_index=True, max_length=256, null=True, validators=[django.core.validators.RegexValidator(regex=b'^[a-z_-]{5,}$')])),
                ('name', models.CharField(db_index=True, max_length=256)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical Data Facility Role',
            },
        ),
        migrations.CreateModel(
            name='HistoricalProfileTag',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('text', models.CharField(db_index=True, max_length=256)),
                ('description', models.CharField(blank=True, max_length=256)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical profile tag',
            },
        ),
        migrations.CreateModel(
            name='HistoricalProject',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('ldap_id', models.IntegerField(blank=True, db_index=True, editable=False, help_text=b'This is an internal LDAP information. Don`t change this value unless you know what you`re doing.', null=True)),
                ('ldap_name', models.CharField(blank=True, db_index=True, max_length=256, null=True, validators=[django.core.validators.RegexValidator(regex=b'^[a-z_-]{5,}$')])),
                ('has_irb', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=256)),
                ('abstract', models.TextField(max_length=256)),
                ('methodology', models.TextField(blank=True, max_length=256)),
                ('expected_outcomes', models.TextField(blank=True, max_length=256)),
                ('status', models.CharField(choices=[(b'Pending Approval', b'Pending Approval'), (b'Active', b'Active'), (b'Archived', b'Archived')], default=b'Pending Approval', max_length=20)),
                ('type', models.CharField(choices=[(b'Capstone', b'Capstone'), (b'Class', b'Class'), (b'Research', b'Research')], default=b'Research', max_length=10)),
                ('environment', models.CharField(blank=True, choices=[(b'Green', b'Green'), (b'Yellow', b'Yellow'), (b'Red', b'Red')], default=b'Green', max_length=10)),
                ('request_id', models.IntegerField(blank=True, default=None, help_text=b'Id for from the ticketing system, so it is possible to trace back if more info is needed.', null=True)),
                ('workspace_path', models.CharField(blank=True, max_length=256)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical project',
            },
        ),
        migrations.CreateModel(
            name='HistoricalProjectMember',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('request_id', models.IntegerField(blank=True, default=None, help_text=b'Id for from the ticketing system (if not the same from project creation), so it is possible to trace back if more info is needed.', null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical project member',
            },
        ),
        migrations.CreateModel(
            name='HistoricalProjectRole',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text=b'This is a friendly name, such as Student (Reader) or Instructor (Admin).', max_length=256)),
                ('description', models.TextField(blank=True, max_length=256)),
                ('system_role', models.CharField(choices=[(b'Reader', b'Reader'), (b'Writer', b'Writer'), (b'Admin', b'Admin')], default=b'Admin', max_length=10)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical project role',
            },
        ),
        migrations.CreateModel(
            name='HistoricalProjectTool',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('additional_info', models.CharField(blank=True, help_text=b'Additional info, such as database name. In case it does not follow the Data Facility convention.', max_length=256)),
                ('request_id', models.IntegerField(blank=True, default=None, help_text=b'Id for from the ticketing system (if not the same from project creation), so it is possible to trace back if more info is needed.', null=True)),
                ('tool_name', models.CharField(choices=[(b'Git Lab', b'Git Lab'), (b'Postgres', b'Postgres'), (b'Oracle', b'Oracle'), (b'POSIX', b'POSIX'), (b'Other', b'Other')], default=b'Postgres', max_length=10)),
                ('other_name', models.CharField(blank=True, help_text=b'Specify the tool name if Other is selected.', max_length=256)),
                ('status', models.CharField(choices=[(b'Active', b'Active'), (b'Deactivated', b'Deactivated')], default=b'Active', max_length=256)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical project tool',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSignedTermsOfUse',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('signed_at', models.DateField()),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical signed terms of use',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTermsOfUse',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('text', models.CharField(db_index=True, max_length=256)),
                ('version', models.IntegerField(blank=True)),
                ('release_date', models.DateField(blank=True, editable=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical terms of use',
            },
        ),
        migrations.CreateModel(
            name='HistoricalTraining',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('url', models.URLField(blank=True, help_text=b'Training website, if any.', max_length=256, null=True)),
                ('description', models.TextField(blank=True, max_length=256, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical training',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('ldap_id', models.IntegerField(blank=True, db_index=True, editable=False, help_text=b'This is an internal LDAP information. Don`t change this value unless you know what you`re doing.', null=True)),
                ('ldap_name', models.CharField(blank=True, db_index=True, max_length=256, null=True, validators=[django.core.validators.RegexValidator(regex=b'^[a-z_-]{5,}$')])),
                ('first_name', models.CharField(max_length=256)),
                ('last_name', models.CharField(max_length=256)),
                ('orc_id', models.CharField(blank=True, max_length=256)),
                ('affiliation', models.CharField(blank=True, max_length=256)),
                ('email', models.EmailField(db_index=True, max_length=254)),
                ('job_title', models.CharField(blank=True, max_length=256)),
                ('sponsor', models.CharField(blank=True, max_length=256)),
                ('status', models.CharField(choices=[(b'Pending Approval', b'Pending Approval'), (b'New', b'New'), (b'Active', b'Active'), (b'Locked', b'Locked'), (b'Locked by too many failed auth attempts', b'Locked by too many failed auth attempts (AUTO)'), (b'Locked by inactivity', b'Locked by inactivity (AUTO)'), (b'Unlocked', b'Unlocked'), (b'Disabled', b'Disabled')], default=b'New', help_text=b'\n    <b>Pending Approval</b>: Accounts on this status will not be created on the system. <br/>\n    <b>New</b>: DFAdmin to create an account on ADRF. DFAdmin will change the status to active after account creation.\n    <br/>\n    <b>Active</b>: Users that can access the system. <br/>\n    <b>Locked</b>: The user account is locked and will not be able to authenticate. \n        To unlock the user, set the status to unlocked.<br/>\n    <b>Locked by too many failed attempts</b>: This is an automatic status and the admin should not use it.\n        After the defined time, the user will return automatically to active. <br/>\n    <b>Locked by inactivity</b>: This is an automatic status, the admin should not use this status. \n        To unlock the user, set the status to unlocked.<br/>\n    <b>Unlocked</b>: Admins should use this status to return a user to active. \n        This can be used (1) before the automatic time, when they\'re locked by too many failed attempts; \n        or (2) when the user is locked by inactivity.<br/>\n    <b>Disabled</b>: This status should be used instead of removing a user. <br/>\n    <a target="_blank" \n     href=\'https://github.com/NYU-Chicago-data-facility/dfadmin/blob/master/documentation/State%20machine%20Diagram%20-%20User%20Status.jpg\'>\n     State machine Diagram - User Status (DFAdmin GitHub)\n    </a>\n    ', max_length=256)),
                ('signed_terms_at', models.DateField(blank=True, help_text=b'Indicates when the user signed the Data Facility Terms of User', null=True)),
                ('ldap_last_auth_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name=b'Last Access')),
                ('ldap_lock_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('ldap_last_pwd_change', models.DateTimeField(blank=True, editable=False, null=True, verbose_name=b'Last Password Change')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('system_user', models.BooleanField(default=False, help_text=b'Is it a system user?')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical user',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUserDfRole',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('begin', models.DateTimeField()),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical user df role',
            },
        ),
        migrations.CreateModel(
            name='HistoricalUserTraining',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('date', models.DateField(blank=True, help_text=b'When this training was taken, for trainings without a specific date.', null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical user training',
            },
        ),
        migrations.CreateModel(
            name='LdapObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ldap_id', models.IntegerField(blank=True, editable=False, help_text=b'This is an internal LDAP information. Don`t change this value unless you know what you`re doing.', null=True, unique=True)),
                ('ldap_name', models.CharField(blank=True, max_length=256, null=True, unique=True, validators=[django.core.validators.RegexValidator(regex=b'^[a-z_-]{5,}$')])),
            ],
        ),
        migrations.CreateModel(
            name='ProfileTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=256, unique=True)),
                ('description', models.CharField(blank=True, max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['text'],
            },
        ),
        migrations.CreateModel(
            name='ProjectMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request_id', models.IntegerField(blank=True, default=None, help_text=b'Id for from the ticketing system (if not the same from project creation), so it is possible to trace back if more info is needed.', null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['project', 'member'],
            },
        ),
        migrations.CreateModel(
            name='ProjectRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text=b'This is a friendly name, such as Student (Reader) or Instructor (Admin).', max_length=256, unique=True)),
                ('description', models.TextField(blank=True, max_length=256)),
                ('system_role', models.CharField(choices=[(b'Reader', b'Reader'), (b'Writer', b'Writer'), (b'Admin', b'Admin')], default=b'Admin', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProjectTool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('additional_info', models.CharField(blank=True, help_text=b'Additional info, such as database name. In case it does not follow the Data Facility convention.', max_length=256)),
                ('request_id', models.IntegerField(blank=True, default=None, help_text=b'Id for from the ticketing system (if not the same from project creation), so it is possible to trace back if more info is needed.', null=True)),
                ('tool_name', models.CharField(choices=[(b'Git Lab', b'Git Lab'), (b'Postgres', b'Postgres'), (b'Oracle', b'Oracle'), (b'POSIX', b'POSIX'), (b'Other', b'Other')], default=b'Postgres', max_length=10)),
                ('other_name', models.CharField(blank=True, help_text=b'Specify the tool name if Other is selected.', max_length=256)),
                ('status', models.CharField(choices=[(b'Active', b'Active'), (b'Deactivated', b'Deactivated')], default=b'Active', max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['tool_name', 'other_name'],
            },
        ),
        migrations.CreateModel(
            name='SignedTermsOfUse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('signed_at', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['user', 'terms_of_use', 'signed_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_export', models.DateTimeField(blank=True, editable=False, null=True)),
                ('last_import', models.DateTimeField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TermsOfUse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=256, unique=True)),
                ('version', models.IntegerField(blank=True)),
                ('release_date', models.DateField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['version'],
            },
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('url', models.URLField(blank=True, help_text=b'Training website, if any.', max_length=256, null=True)),
                ('description', models.TextField(blank=True, max_length=256, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name', 'date'],
            },
        ),
        migrations.CreateModel(
            name='UserDfRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('begin', models.DateTimeField()),
                ('end', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['user', 'role'],
            },
        ),
        migrations.CreateModel(
            name='UserTraining',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, help_text=b'When this training was taken, for trainings without a specific date.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('training', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_facility_admin.Training')),
            ],
            options={
                'ordering': ['date', 'user', 'training'],
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('ldapobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data_facility_admin.LdapObject')),
                ('public', models.BooleanField(default=False, help_text=b'Check this if everyone should have access to this dataset.')),
                ('doi', models.CharField(max_length=256, unique=True)),
                ('name', models.CharField(max_length=256)),
                ('version', models.CharField(blank=True, default=b'1', max_length=256, null=True)),
                ('storage_location', models.CharField(blank=True, help_text=b'Location of this dataset (Optional if dataset is green).', max_length=256, null=True)),
                ('vault_volume', models.CharField(blank=True, help_text=b'Volume on DF Vault. For non green datasets only. This information is internal.', max_length=256, null=True)),
                ('needs_review', models.BooleanField(default=False)),
                ('shareable', models.BooleanField(default=True, help_text=b'Indicates if this dataset can be shared with other users.')),
                ('last_reported_at', models.DateField(blank=True, null=True)),
                ('expiration', models.DateField(blank=True, null=True)),
                ('data_classification', models.CharField(choices=[(b'Green', b'Green'), (b'Restricted Green', b'Restricted Green'), (b'Yellow', b'Yellow'), (b'Red', b'Red')], default=b'Green', max_length=256)),
                ('report_frequency', models.CharField(choices=[(b'No Reporting Needed', b'No Reporting Needed'), (b'Quarterly', b'Quarterly'), (b'Biannual', b'Biannual'), (b'Annual', b'Annual')], default=b'No Reporting Needed', max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data_provider', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='data_facility_admin.DataProvider')),
            ],
            options={
                'ordering': ['doi', 'name'],
            },
            bases=('data_facility_admin.ldapobject',),
        ),
        migrations.CreateModel(
            name='DfRole',
            fields=[
                ('ldapobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data_facility_admin.LdapObject')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.CharField(blank=True, max_length=256, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Data Facility Role',
                'verbose_name_plural': 'Data Facility Roles',
            },
            bases=('data_facility_admin.ldapobject',),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('ldapobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data_facility_admin.LdapObject')),
                ('has_irb', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=256)),
                ('abstract', models.TextField(max_length=256)),
                ('methodology', models.TextField(blank=True, max_length=256)),
                ('expected_outcomes', models.TextField(blank=True, max_length=256)),
                ('status', models.CharField(choices=[(b'Pending Approval', b'Pending Approval'), (b'Active', b'Active'), (b'Archived', b'Archived')], default=b'Pending Approval', max_length=20)),
                ('type', models.CharField(choices=[(b'Capstone', b'Capstone'), (b'Class', b'Class'), (b'Research', b'Research')], default=b'Research', max_length=10)),
                ('environment', models.CharField(blank=True, choices=[(b'Green', b'Green'), (b'Yellow', b'Yellow'), (b'Red', b'Red')], default=b'Green', max_length=10)),
                ('request_id', models.IntegerField(blank=True, default=None, help_text=b'Id for from the ticketing system, so it is possible to trace back if more info is needed.', null=True)),
                ('workspace_path', models.CharField(blank=True, max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('instructors', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='data_facility_admin.DfRole')),
            ],
            options={
                'ordering': ['name'],
            },
            bases=('data_facility_admin.ldapobject',),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('ldapobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='data_facility_admin.LdapObject')),
                ('first_name', models.CharField(max_length=256)),
                ('last_name', models.CharField(max_length=256)),
                ('orc_id', models.CharField(blank=True, max_length=256)),
                ('affiliation', models.CharField(blank=True, max_length=256)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('job_title', models.CharField(blank=True, max_length=256)),
                ('sponsor', models.CharField(blank=True, max_length=256)),
                ('status', models.CharField(choices=[(b'Pending Approval', b'Pending Approval'), (b'New', b'New'), (b'Active', b'Active'), (b'Locked', b'Locked'), (b'Locked by too many failed auth attempts', b'Locked by too many failed auth attempts (AUTO)'), (b'Locked by inactivity', b'Locked by inactivity (AUTO)'), (b'Unlocked', b'Unlocked'), (b'Disabled', b'Disabled')], default=b'New', help_text=b'\n    <b>Pending Approval</b>: Accounts on this status will not be created on the system. <br/>\n    <b>New</b>: DFAdmin to create an account on ADRF. DFAdmin will change the status to active after account creation.\n    <br/>\n    <b>Active</b>: Users that can access the system. <br/>\n    <b>Locked</b>: The user account is locked and will not be able to authenticate. \n        To unlock the user, set the status to unlocked.<br/>\n    <b>Locked by too many failed attempts</b>: This is an automatic status and the admin should not use it.\n        After the defined time, the user will return automatically to active. <br/>\n    <b>Locked by inactivity</b>: This is an automatic status, the admin should not use this status. \n        To unlock the user, set the status to unlocked.<br/>\n    <b>Unlocked</b>: Admins should use this status to return a user to active. \n        This can be used (1) before the automatic time, when they\'re locked by too many failed attempts; \n        or (2) when the user is locked by inactivity.<br/>\n    <b>Disabled</b>: This status should be used instead of removing a user. <br/>\n    <a target="_blank" \n     href=\'https://github.com/NYU-Chicago-data-facility/dfadmin/blob/master/documentation/State%20machine%20Diagram%20-%20User%20Status.jpg\'>\n     State machine Diagram - User Status (DFAdmin GitHub)\n    </a>\n    ', max_length=256)),
                ('signed_terms_at', models.DateField(blank=True, help_text=b'Indicates when the user signed the Data Facility Terms of User', null=True)),
                ('ldap_last_auth_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name=b'Last Access')),
                ('ldap_lock_time', models.DateTimeField(blank=True, editable=False, null=True)),
                ('ldap_last_pwd_change', models.DateTimeField(blank=True, editable=False, null=True, verbose_name=b'Last Password Change')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('system_user', models.BooleanField(default=False, help_text=b'Is it a system user?')),
                ('tags', models.ManyToManyField(blank=True, to='data_facility_admin.ProfileTag')),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
            bases=('data_facility_admin.ldapobject',),
        ),
        migrations.AddField(
            model_name='signedtermsofuse',
            name='terms_of_use',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_facility_admin.TermsOfUse'),
        ),
        migrations.AddField(
            model_name='projectmember',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_facility_admin.ProjectRole'),
        ),
        migrations.AddField(
            model_name='historicalusertraining',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalusertraining',
            name='training',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.Training'),
        ),
        migrations.AddField(
            model_name='historicaluserdfrole',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaluser',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaluser',
            name='ldapobject_ptr',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.LdapObject'),
        ),
        migrations.AddField(
            model_name='historicaltraining',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaltermsofuse',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalsignedtermsofuse',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalsignedtermsofuse',
            name='terms_of_use',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.TermsOfUse'),
        ),
        migrations.AddField(
            model_name='historicalprojecttool',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalprojectrole',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalprojectmember',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalprojectmember',
            name='role',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.ProjectRole'),
        ),
        migrations.AddField(
            model_name='historicalproject',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalproject',
            name='ldapobject_ptr',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.LdapObject'),
        ),
        migrations.AddField(
            model_name='historicalproject',
            name='parent_project',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.HistoricalProject'),
        ),
        migrations.AddField(
            model_name='historicalprofiletag',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldfrole',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldfrole',
            name='ldapobject_ptr',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.LdapObject'),
        ),
        migrations.AddField(
            model_name='historicaldatasteward',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldatasetaccess',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldataset',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldataset',
            name='ldapobject_ptr',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.LdapObject'),
        ),
        migrations.AddField(
            model_name='historicaldataagreementsignature',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldataagreement',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='usertraining',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='userdfrole',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_facility_admin.DfRole'),
        ),
        migrations.AddField(
            model_name='userdfrole',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='signedtermsofuse',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='projecttool',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_facility_admin.Project'),
        ),
        migrations.AddField(
            model_name='projectmember',
            name='member',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='projectmember',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_facility_admin.Project'),
        ),
        migrations.AddField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='project',
            name='parent_project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='data_facility_admin.Project'),
        ),
        migrations.AddField(
            model_name='historicalusertraining',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='historicaluserdfrole',
            name='role',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.DfRole'),
        ),
        migrations.AddField(
            model_name='historicaluserdfrole',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='historicalsignedtermsofuse',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='historicalprojecttool',
            name='project',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.Project'),
        ),
        migrations.AddField(
            model_name='historicalprojectmember',
            name='member',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='historicalprojectmember',
            name='project',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.Project'),
        ),
        migrations.AddField(
            model_name='historicalproject',
            name='instructors',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.DfRole'),
        ),
        migrations.AddField(
            model_name='historicalproject',
            name='owner',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='historicaldatasteward',
            name='dataset',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.Dataset'),
        ),
        migrations.AddField(
            model_name='historicaldatasteward',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='historicaldatasetaccess',
            name='dataset',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.Dataset'),
        ),
        migrations.AddField(
            model_name='historicaldatasetaccess',
            name='project',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.Project'),
        ),
        migrations.AddField(
            model_name='historicaldataagreementsignature',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='historicaldataagreement',
            name='dataset',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='data_facility_admin.Dataset'),
        ),
        migrations.AddField(
            model_name='datasteward',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_facility_admin.Dataset'),
        ),
        migrations.AddField(
            model_name='datasteward',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='datasetaccess',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_facility_admin.Dataset'),
        ),
        migrations.AddField(
            model_name='datasetaccess',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='data_facility_admin.Project'),
        ),
        migrations.AddField(
            model_name='dataagreementsignature',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_facility_admin.User'),
        ),
        migrations.AddField(
            model_name='dataagreement',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_facility_admin.Dataset'),
        ),
        migrations.AlterUniqueTogether(
            name='userdfrole',
            unique_together=set([('user', 'role')]),
        ),
        migrations.AlterUniqueTogether(
            name='dataagreementsignature',
            unique_together=set([('user', 'data_agreement')]),
        ),
    ]
